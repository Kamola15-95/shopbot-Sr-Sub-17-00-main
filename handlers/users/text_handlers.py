from aiogram.types import Message
from aiogram.types import Location
from aiogram import types
from data.loader import bot, dp, db
from states.states import NumberState
from aiogram.dispatcher import FSMContext
import re
from keyboards.reply import generate_main_menu, generate_delivery_types, \
    generate_filials_list, generate_categories, generate_information, \
    generate_filials_information

async def start_register(message: Message, state=None):
    await NumberState.phone.set()
    await message.answer('–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: <b>+998 ** *** ** **</b>')

@dp.message_handler(state=NumberState.phone)
async def get_phone(message: Message, state: FSMContext):
    phone = message.text
    result1 = re.search(r'\+998 \d\d \d\d\d \d\d \d\d', phone)
    result2 = re.search(r'\+998\d{9}', phone)
    if result1 or result2:
        await message.answer('–û–∫')
        chat_id = message.chat.id
        full_name = message.from_user.full_name
        await state.finish()
        db.insert_user(chat_id, full_name, phone)
        await show_main_menu(message)
    else:
        await message.answer('No')
        await state.finish()
        await again_start_register(message)


async def again_start_register(message: Message, state=None):
    await NumberState.phone.set()
    await message.answer('''–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏–ª–∏ –∑–∞–ø–∏—Å—å. 
–ù–∞–ø–∏—à–∏—Ç–µ –≤ —ç—Ç–æ–º —Ñ–æ—Ä–º–∞—Ç–µ: <b>+998 ** *** ** **</b>''')

@dp.message_handler(regexp='üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
async def show_main_menu(message: Message):
    await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª: ', reply_markup=generate_main_menu())

# @dp.message_handler(regexp='‚öô –ù–∞—Å—Ç—Ä–æ–π–∫–∏')

@dp.message_handler(regexp='üõç –ó–∞–∫–∞–∑–∞—Ç—å')
@dp.message_handler(regexp='üöó –∫ –≤—ã–±–æ—Ä—É –¥–æ—Å—Ç–∞–≤–∫–∏')
async def show_delivery_choice(message: Message):
    await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∑–∞–∫–∞–∑–∞: ', reply_markup=generate_delivery_types())


@dp.message_handler(regexp='‚óÄ –∫ —Ñ–∏–ª–∏–∞–ª–∞–º')
@dp.message_handler(regexp='üèÉ‚Äç‚ôÄÔ∏è–°–∞–º–æ–≤—ã–≤–æ–∑')
async def show_filials_choice(message: Message):
    await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏–ª–∏–∞–ª: ', reply_markup=generate_filials_list())

filials = [i[0] for i in db.get_filials_names()]

@dp.message_handler(lambda message: message.text in filials)
async def show_menu(message: Message):
    await message.answer('–í—ã—Ç–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é: ', reply_markup=generate_categories())

@dp.message_handler(regexp='‚Ñπ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è')
@dp.message_handler(regexp='‚óÄÔ∏è –ù–∞–∑–∞–¥')
async def show_information(message: Message):
    await message.answer('‚Ñπ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', reply_markup=generate_information())

@dp.message_handler(regexp='üèò –§–∏–ª–∏–∞–ª—ã')
async def show_filials(message: Message):
    await message.answer('üèò –í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏–ª–∏–∞–ª: ', reply_markup=generate_filials_information())

from aiogram import types

@dp.message_handler(lambda message: message.text.startswith('üèò'))
async def show_filial_details(message: types.Message):
    selected_filials = message.text[1:].split(',')
    for selected_filial in selected_filials:
        filial_info = db.get_filial(selected_filial.strip())
        if filial_info:
            filial_name, places, worktime, address = filial_info
            coordinates = db.get_filial_coordinates(selected_filial.strip())
            if coordinates:
                latitude, longitude = coordinates
                latitude = float(latitude)
                longitude = float(longitude)
                location = types.Location(latitude=float(latitude), longitude=float(longitude))
                map_link = f'https://maps.google.com/?q={latitude},{longitude}'
                details_text = f'''
üè¢ –§–∏–ª–∏–∞–ª: {filial_name}
üìç –ê–¥—Ä–µ—Å: {address}
‚åöÔ∏è –†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã: {worktime}
üçΩ –í–º–µ—Å—Ç–∏–º–æ—Å—Ç—å: {places} –º–µ—Å—Ç
üåç –ì–µ–æ–ª–æ–∫–∞—Ü–∏—è: {location.latitude}, {location.longitude}
üó∫ –ü–µ—Ä–µ–π—Ç–∏ –≤ –∫–∞—Ä—Ç—ã: {map_link}
                '''
            else:
                details_text = f'''
üè¢ –§–∏–ª–∏–∞–ª: {filial_name}
üìç –ê–¥—Ä–µ—Å: {address}
‚åöÔ∏è –†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã: {worktime}
üçΩ –í–º–µ—Å—Ç–∏–º–æ—Å—Ç—å: {places} –º–µ—Å—Ç
üåç –ì–µ–æ–ª–æ–∫–∞—Ü–∏—è: –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ
                '''
            await message.answer(details_text, reply_markup=generate_filials_information())
        else:
            await message.answer(f'–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ñ–∏–ª–∏–∞–ª–µ "{selected_filial}" –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.')




# –°–¥–µ–ª–∞—Ç—å —Ä–µ–∞–∫—Ü–∏—é –Ω–∞ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∏ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –∫–Ω–æ–ø–∫–∏
# –°–¥–µ–ª–∞—Ç—å —Ä–µ–∞–∫—Ü–∏—é –Ω–∞ –§–∏–ª–∏–∞–ª—ã
# –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å —Å–ø–∏—Å–æ–∫ —Ñ–∏–ª–∏–∞–ª–æ–≤ —Å –¥–æ–º–∏–∫–∞–º–∏
# –°–¥–µ–ª–∞—Ç—å —Ä–µ–∞–∫—Ü–∏—é –Ω–∞ —Ñ–∏–ª–∏–∞–ª—ã —Å –¥–æ–º–∏–∫–∞–º–∏ –∏ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ —Ñ–∏–ª–∏–∞–ª–∞




